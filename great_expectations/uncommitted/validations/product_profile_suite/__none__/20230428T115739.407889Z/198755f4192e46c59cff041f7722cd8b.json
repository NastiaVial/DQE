{
  "evaluation_parameters": {},
  "meta": {
    "active_batch_definition": {
      "batch_identifiers": {},
      "data_asset_name": "Product",
      "data_connector_name": "default_configured_data_connector_name",
      "datasource_name": "my_datasource"
    },
    "batch_markers": {
      "ge_load_time": "20230428T115739.453107Z"
    },
    "batch_spec": {
      "batch_identifiers": {},
      "class_name": "Asset",
      "data_asset_name": "Product",
      "module_name": "great_expectations.datasource.data_connector.asset",
      "schema_name": "Production",
      "sorters": {},
      "table_name": "Product",
      "type": null
    },
    "checkpoint_id": null,
    "checkpoint_name": "Product_product_profile_suite",
    "expectation_suite_name": "product_profile_suite",
    "great_expectations_version": "0.16.0",
    "run_id": {
      "run_name": null,
      "run_time": "2023-04-28T13:57:39.407889+02:00"
    },
    "validation_id": null,
    "validation_time": "20230428T115739.493179Z"
  },
  "results": [
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_unique",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column_values.unique.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "max_value": 999,
          "min_value": 1,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ProductID"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ProductID"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "max_value": 747.5,
          "min_value": 747.5,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "max_value": 229.37314180957807,
          "min_value": 229.37314180957807,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_unique",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Name"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Name"
              },
              "metric_name": "column_values.unique.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Name"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Name"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_unique",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductNumber"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductNumber"
              },
              "metric_name": "column_values.unique.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductNumber"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductNumber"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_unique",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DiscontinuedDate"
              },
              "metric_name": "column_values.unique.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DiscontinuedDate"
              },
              "metric_name": "column_values.null.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate",
          "max_value": 0.0,
          "min_value": 0.0,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "DiscontinuedDate"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "DiscontinuedDate"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate",
          "max_value": 0,
          "min_value": 0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DiscontinuedDate"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_unique",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "rowguid"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "rowguid"
              },
              "metric_name": "column_values.unique.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "rowguid"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "rowguid"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "MakeFlag"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "MakeFlag"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "MakeFlag",
          "mostly": 1.0,
          "value_set": [
            false,
            true
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "MakeFlag"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "MakeFlag",
          "max_value": 0.003968253968253968,
          "min_value": 0.003968253968253968,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "MakeFlag"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "FinishedGoodsFlag"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "FinishedGoodsFlag"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "FinishedGoodsFlag",
          "mostly": 1.0,
          "value_set": [
            false,
            true
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "FinishedGoodsFlag"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "FinishedGoodsFlag",
          "max_value": 0.003968253968253968,
          "min_value": 0.003968253968253968,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "FinishedGoodsFlag"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 1000,
          "min_value": 4,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "SafetyStockLevel"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "SafetyStockLevel"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 500.0,
          "min_value": 500.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 374.11295362091283,
          "min_value": 374.11295362091283,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "mostly": 1.0,
          "value_set": [
            800,
            100,
            4,
            1000,
            500,
            60
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 0.011904761904761904,
          "min_value": 0.011904761904761904,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 750,
          "min_value": 3,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ReorderPoint"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ReorderPoint"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 375.0,
          "min_value": 375.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 280.5847152156847,
          "min_value": 280.5847152156847,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "mostly": 1.0,
          "value_set": [
            3,
            75,
            45,
            750,
            375,
            600
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 0.011904761904761904,
          "min_value": 0.011904761904761904,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "StandardCost"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "StandardCost"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ListPrice"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ListPrice"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 4,
          "min_value": 0,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "DaysToManufacture"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "DaysToManufacture"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 1.0,
          "min_value": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 1.4926159675916586,
          "min_value": 1.4926159675916586,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "mostly": 1.0,
          "value_set": [
            0,
            1,
            2,
            4
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 0.007936507936507936,
          "min_value": 0.007936507936507936,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellStartDate"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellStartDate"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellStartDate",
          "max_value": "2013-05-30T00:00:00",
          "min_value": "2008-04-30T00:00:00",
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "SellStartDate"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "SellStartDate"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellStartDate",
          "max_value": 0.007936507936507936,
          "min_value": 0.007936507936507936,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellStartDate"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate"
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ModifiedDate"
              },
              "metric_name": "column_values.nonnull.unexpected_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT TOP 20 [ModifiedDate] AS unexpected_values \nFROM [#ge_temp_51f4e933] \nWHERE [ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)]\n[parameters: ('2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000')]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 555, in _process_direct_and_bundled_metric_computation_configurations\n    ] = metric_computation_configuration.metric_fn(  # type: ignore[misc] # F not callable\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\expectations\\metrics\\map_metric_provider.py\", line 2227, in _sqlalchemy_column_map_condition_values\n    for val in execution_engine.engine.execute(query).fetchall()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT TOP 20 [ModifiedDate] AS unexpected_values \nFROM [#ge_temp_51f4e933] \nWHERE [ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)]\n[parameters: ('2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000')]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 559, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT TOP 20 [ModifiedDate] AS unexpected_values \nFROM [#ge_temp_51f4e933] \nWHERE [ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)]\n[parameters: ('2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000')]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate",
          "max_value": "2014-02-08T10:03:55.510000",
          "min_value": "2014-02-08T10:01:36.827000",
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ModifiedDate"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ModifiedDate"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate",
          "max_value": "2014-02-08T10:03:55.510000",
          "min_value": "2014-02-08T10:01:36.827000",
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ModifiedDate"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ModifiedDate"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate",
          "max_value": 0.003968253968253968,
          "min_value": 0.003968253968253968,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ModifiedDate"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "max_value": 1050.0,
          "min_value": 2.12,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "Weight"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "Weight"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "max_value": 17.9,
          "min_value": 17.9,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Weight"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "max_value": 182.1665882371849,
          "min_value": 182.1665882371849,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Weight"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 37,
          "min_value": 1,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ProductSubcategoryID"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ProductSubcategoryID"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 12,
          "min_value": 12,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 9.860134530977973,
          "min_value": 9.860134530977973,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "mostly": 1.0,
          "value_set": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 0.12542372881355932,
          "min_value": 0.12542372881355932,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "max_value": 128,
          "min_value": 1,
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ProductModelID"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "ProductModelID"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_median_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "max_value": 26,
          "min_value": 26,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductModelID"
              },
              "metric_name": "column.median",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_stdev_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "max_value": 34.025442017484266,
          "min_value": 34.025442017484266,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductModelID"
              },
              "metric_name": "column.standard_deviation",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellEndDate",
          "max_value": "2013-05-29T00:00:00",
          "min_value": "2012-05-29T00:00:00",
          "mostly": 1.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "column_max_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "SellEndDate"
                },
                "metric_name": "column.max",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            },
            "column_min_values_range_estimator": {
              "metric_configuration": {
                "domain_kwargs": {
                  "column": "SellEndDate"
                },
                "metric_name": "column.min",
                "metric_value_kwargs": null
              },
              "num_batches": 1
            }
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellEndDate",
          "max_value": 0.02040816326530612,
          "min_value": 0.02040816326530612,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellEndDate"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Color",
          "mostly": 1.0,
          "value_set": [
            "Black",
            "Yellow",
            "Blue",
            "Red",
            "White",
            "Silver/Black",
            "Silver",
            "Multi",
            "Grey"
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Color"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Color",
          "max_value": 0.03515625,
          "min_value": 0.03515625,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Color"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Size",
          "mostly": 1.0,
          "value_set": [
            "L",
            "50",
            "46",
            "38",
            "62",
            "70",
            "56",
            "40",
            "42",
            "M",
            "60",
            "XL",
            "54",
            "48",
            "52",
            "44",
            "58",
            "S"
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Size"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Size",
          "max_value": 0.08530805687203792,
          "min_value": 0.08530805687203792,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Size"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SizeUnitMeasureCode",
          "mostly": 1.0,
          "value_set": [
            "CM "
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SizeUnitMeasureCode"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SizeUnitMeasureCode",
          "max_value": 0.005681818181818182,
          "min_value": 0.005681818181818182,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SizeUnitMeasureCode"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "WeightUnitMeasureCode",
          "mostly": 1.0,
          "value_set": [
            "G  ",
            "LB "
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "WeightUnitMeasureCode"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "WeightUnitMeasureCode",
          "max_value": 0.00975609756097561,
          "min_value": 0.00975609756097561,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "WeightUnitMeasureCode"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductLine",
          "mostly": 1.0,
          "value_set": [
            "S ",
            "M ",
            "R ",
            "T "
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductLine"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductLine",
          "max_value": 0.014388489208633094,
          "min_value": 0.014388489208633094,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductLine"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Class",
          "mostly": 1.0,
          "value_set": [
            "M ",
            "H ",
            "L "
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Class"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Class",
          "max_value": 0.012145748987854251,
          "min_value": 0.012145748987854251,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Class"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Style",
          "mostly": 1.0,
          "value_set": [
            "M ",
            "W ",
            "U "
          ]
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Style"
              },
              "metric_name": "column.distinct_values",
              "metric_value_kwargs": null
            },
            "num_batches": 1,
            "parse_strings_as_datetimes": false
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": "(pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)",
        "exception_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\npyodbc.DataError: ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 570, in _process_direct_and_bundled_metric_computation_configurations\n    ] = self.resolve_metric_bundle(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\sqlalchemy_execution_engine.py\", line 1067, in resolve_metric_bundle\n    res = self.engine.execute(sa_query_object).fetchall()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1380, in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1572, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1943, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2124, in _handle_dbapi_exception\n    util.raise_(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 211, in raise_\n    raise exception\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1900, in _execute_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.DataError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\validator\\validation_graph.py\", line 276, in _resolve\n    self._execution_engine.resolve_metrics(\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 290, in resolve_metrics\n    return self._process_direct_and_bundled_metric_computation_configurations(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anastasiya_Vial\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\great_expectations\\execution_engine\\execution_engine.py\", line 575, in _process_direct_and_bundled_metric_computation_configurations\n    raise gx_exceptions.MetricResolutionError(\ngreat_expectations.exceptions.exceptions.MetricResolutionError: (pyodbc.DataError) ('22007', '[22007] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Conversion failed when converting date and/or time from character string. (241) (SQLExecDirectW)')\n[SQL: SELECT sum(CASE WHEN ([FinishedGoodsFlag] IS NOT NULL AND ([FinishedGoodsFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN (rowguid IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([WeightUnitMeasureCode] IS NOT NULL AND ([WeightUnitMeasureCode] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([StandardCost] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SellStartDate] IS NOT NULL AND NOT ([SellStartDate] >= ? AND [SellStartDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL AND NOT ([DiscontinuedDate] >= ? AND [DiscontinuedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Color] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND NOT ([ProductSubcategoryID] >= ? AND [ProductSubcategoryID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Weight] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductLine] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Color] IS NOT NULL AND ([Color] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Name] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL AND NOT ([Weight] >= ? AND [Weight] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductLine] IS NOT NULL AND ([ProductLine] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([MakeFlag] IS NOT NULL AND ([MakeFlag] NOT IN (?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Class] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND ([SafetyStockLevel] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SellEndDate] IS NOT NULL AND NOT ([SellEndDate] >= ? AND [SellEndDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ProductNumber] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ListPrice] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DiscontinuedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SafetyStockLevel] IS NOT NULL AND NOT ([SafetyStockLevel] >= ? AND [SafetyStockLevel] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Class] IS NOT NULL AND ([Class] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Weight] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([Size] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductSubcategoryID] IS NOT NULL AND ([ProductSubcategoryID] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL AND NOT ([ProductModelID] >= ? AND [ProductModelID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND NOT ([DaysToManufacture] >= ? AND [DaysToManufacture] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([Style] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ProductID] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND ([ReorderPoint] NOT IN (?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([Size] IS NOT NULL AND ([Size] NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([FinishedGoodsFlag] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL AND NOT ([ReorderPoint] >= ? AND [ReorderPoint] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([Style] IS NOT NULL AND ([Style] NOT IN (?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([SizeUnitMeasureCode] IS NOT NULL AND ([SizeUnitMeasureCode] NOT IN (?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ProductModelID] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ProductID] IS NOT NULL AND NOT ([ProductID] >= ? AND [ProductID] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NULL) THEN ? ELSE ? END) AS [column_values.nonnull.unexpected_count], sum(CASE WHEN ([DaysToManufacture] IS NOT NULL AND ([DaysToManufacture] NOT IN (?, ?, ?, ?))) THEN ? ELSE ? END) AS [column_values.in_set.unexpected_count], sum(CASE WHEN ([ModifiedDate] IS NOT NULL AND NOT ([ModifiedDate] >= ? AND [ModifiedDate] <= ?)) THEN ? ELSE ? END) AS [column_values.between.unexpected_count], sum(CASE WHEN ([ReorderPoint] IS NOT NULL) THEN ? ELSE ? END) AS [column_values.null.unexpected_count] \nFROM [#ge_temp_51f4e933]]\n[parameters: (0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 'G  ', 'LB ', 1, 0, 1, 0, 1, 0, 1, 0, '2008-04-30T00:00:00', '2013-05-30T00:00:00', 1, 0, 0.0, 0.0, 1, 0, 1, 0, 1, 37, 1, 0, 1, 0, 1, 0, 'Black', 'Yellow', 'Blue', 'Red', 'White', 'Silver/Black', 'Silver', 'Multi', 'Grey', 1, 0, 1, 0, 1, 0, 2.12, 1050.0, 1, 0, 'S ', 'M ', 'R ', 'T ', 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 800, 100, 4, 1000, 500, 60, 1, 0, '2012-05-29T00:00:00', '2013-05-29T00:00:00', 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 1000, 1, 0, 'M ', 'H ', 'L ', 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 0, 1, 128, 1, 0, 0, 4, 1, 0, 1, 0, 1, 0, 3, 75, 45, 750, 375, 600, 1, 0, 'L', '50', '46', '38', '62', '70', '56', '40', '42', 'M', '60', 'XL', '54', '48', '52', '44', '58', 'S', 1, 0, 1, 0, 1, 0, 3, 750, 1, 0, 1, 0, 'M ', 'W ', 'U ', 1, 0, 1, 0, 'CM ', 1, 0, 1, 0, 1, 999, 1, 0, 1, 0, 1, 0, 0, 1, 2, 4, 1, 0, '2014-02-08T10:01:36.827000', '2014-02-08T10:03:55.510000', 1, 0, 1, 0)]\n(Background on this error at: https://sqlalche.me/e/14/9h9h)\n",
        "raised_exception": true
      },
      "expectation_config": {
        "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Style",
          "max_value": 0.014218009478672985,
          "min_value": 0.014218009478672985,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Style"
              },
              "metric_name": "column.unique_proportion",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {},
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_table_row_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "max_value": 504,
          "min_value": 504
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {},
              "metric_name": "table.row_count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 504
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_table_columns_to_match_set",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column_set": [
            "DaysToManufacture",
            "ProductSubcategoryID",
            "ReorderPoint",
            "ProductNumber",
            "StandardCost",
            "SafetyStockLevel",
            "ProductLine",
            "Weight",
            "DiscontinuedDate",
            "ModifiedDate",
            "Class",
            "WeightUnitMeasureCode",
            "SellEndDate",
            "Size",
            "Color",
            "ListPrice",
            "Style",
            "FinishedGoodsFlag",
            "MakeFlag",
            "rowguid",
            "SizeUnitMeasureCode",
            "ProductModelID",
            "ProductID",
            "SellStartDate",
            "Name"
          ],
          "exact_match": null
        },
        "meta": {
          "profiler_details": {
            "success_ratio": 1.0
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": [
          "ProductID",
          "Name",
          "ProductNumber",
          "MakeFlag",
          "FinishedGoodsFlag",
          "Color",
          "SafetyStockLevel",
          "ReorderPoint",
          "StandardCost",
          "ListPrice",
          "Size",
          "SizeUnitMeasureCode",
          "WeightUnitMeasureCode",
          "Weight",
          "DaysToManufacture",
          "ProductLine",
          "Class",
          "Style",
          "ProductSubcategoryID",
          "ProductModelID",
          "SellStartDate",
          "SellEndDate",
          "DiscontinuedDate",
          "rowguid",
          "ModifiedDate"
        ]
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "max_value": 1,
          "min_value": 1,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "max_value": 999,
          "min_value": 999,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 999
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                447,
                447
              ],
              [
                747,
                747
              ],
              [
                873,
                873
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            447,
            747,
            873
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductID",
          "max_value": 673.0396825396825,
          "min_value": 673.0396825396825,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductID"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 673.0396825396825
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate",
          "max_value": 0.0,
          "min_value": 0.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DiscontinuedDate"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": null
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate",
          "max_value": 0.0,
          "min_value": 0.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DiscontinuedDate"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": null
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DiscontinuedDate",
          "max_value": 0,
          "min_value": 0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DiscontinuedDate"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "MakeFlag",
          "max_value": 2,
          "min_value": 2,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "MakeFlag"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 2
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "FinishedGoodsFlag",
          "max_value": 2,
          "min_value": 2,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "FinishedGoodsFlag"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 2
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 4,
          "min_value": 4,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 4
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 1000,
          "min_value": 1000,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1000
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                100,
                100
              ],
              [
                500,
                500
              ],
              [
                1000,
                1000
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            100,
            500,
            1000
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 535.1507936507936,
          "min_value": 535.1507936507936,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 535.1507936507936
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SafetyStockLevel",
          "max_value": 6,
          "min_value": 6,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SafetyStockLevel"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 6
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 3,
          "min_value": 3,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 3
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 750,
          "min_value": 750,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 750
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                75,
                75
              ],
              [
                375,
                375
              ],
              [
                750,
                750
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            75,
            375,
            750
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 401.36309523809524,
          "min_value": 401.36309523809524,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 401.36309523809524
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ReorderPoint",
          "max_value": 6,
          "min_value": 6,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ReorderPoint"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 6
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 0,
          "min_value": 0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 4,
          "min_value": 4,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 4
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                0,
                0
              ],
              [
                1,
                1
              ],
              [
                1,
                1
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            0,
            1,
            1
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 1.1031746031746033,
          "min_value": 1.1031746031746033,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1.1031746031746033
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "DaysToManufacture",
          "max_value": 4,
          "min_value": 4,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "DaysToManufacture"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 4
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellStartDate",
          "max_value": "2008-04-30T00:00:00",
          "min_value": "2008-04-30T00:00:00",
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellStartDate"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": "2008-04-30T00:00:00"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellStartDate",
          "max_value": "2013-05-30T00:00:00",
          "min_value": "2013-05-30T00:00:00",
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellStartDate"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": "2013-05-30T00:00:00"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellStartDate",
          "max_value": 4,
          "min_value": 4,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellStartDate"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 4
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate",
          "max_value": "2014-02-08T10:01:36.827000",
          "min_value": "2014-02-08T10:01:36.827000",
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ModifiedDate"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": "2014-02-08T10:01:36.827000"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate",
          "max_value": "2014-02-08T10:03:55.510000",
          "min_value": "2014-02-08T10:03:55.510000",
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ModifiedDate"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": "2014-02-08T10:03:55.510000"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ModifiedDate",
          "max_value": 2,
          "min_value": 2,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ModifiedDate"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 2
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "max_value": 2.12,
          "min_value": 2.12,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Weight"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 2.12
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "max_value": 1050.0,
          "min_value": 1050.0,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Weight"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1050.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                2.88,
                2.88
              ],
              [
                17.9,
                17.9
              ],
              [
                27.35,
                27.35
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Weight"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            2.88,
            17.9,
            27.35
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Weight",
          "max_value": 74.06921951219512,
          "min_value": 74.06921951219512,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Weight"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 74.06921951219512
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 1,
          "min_value": 1,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 37,
          "min_value": 37,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 37
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                2,
                2
              ],
              [
                12,
                12
              ],
              [
                17,
                17
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            2,
            12,
            17
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 12.294915254237289,
          "min_value": 12.294915254237289,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 12.294915254237289
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductSubcategoryID",
          "max_value": 37,
          "min_value": 37,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductSubcategoryID"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 37
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "max_value": 1,
          "min_value": 1,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductModelID"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "max_value": 128,
          "min_value": 128,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductModelID"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 128
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_quantile_values_to_be_between",
        "kwargs": {
          "allow_relative_error": false,
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "quantile_ranges": {
            "quantiles": [
              0.25,
              0.5,
              0.75
            ],
            "value_ranges": [
              [
                11,
                11
              ],
              [
                26,
                26
              ],
              [
                49,
                49
              ]
            ]
          }
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductModelID"
              },
              "metric_name": "column.quantile_values",
              "metric_value_kwargs": {
                "allow_relative_error": false,
                "quantiles": [
                  0.25,
                  0.5,
                  0.75
                ]
              }
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "details": {
          "success_details": [
            true,
            true,
            true
          ]
        },
        "observed_value": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "values": [
            11,
            26,
            49
          ]
        }
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_mean_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductModelID",
          "max_value": 37.44406779661017,
          "min_value": 37.44406779661017,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductModelID"
              },
              "metric_name": "column.mean",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 37.44406779661017
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_min_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellEndDate",
          "max_value": "2012-05-29T00:00:00",
          "min_value": "2012-05-29T00:00:00",
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellEndDate"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": "2012-05-29T00:00:00"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_max_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellEndDate",
          "max_value": "2013-05-29T00:00:00",
          "min_value": "2013-05-29T00:00:00",
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellEndDate"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": "2013-05-29T00:00:00"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SellEndDate",
          "max_value": 2,
          "min_value": 2,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SellEndDate"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 2
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Color",
          "max_value": 9,
          "min_value": 9,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Color"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 9
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Size",
          "max_value": 18,
          "min_value": 18,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Size"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 18
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "SizeUnitMeasureCode",
          "max_value": 1,
          "min_value": 1,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "SizeUnitMeasureCode"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 1
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "WeightUnitMeasureCode",
          "max_value": 2,
          "min_value": 2,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "WeightUnitMeasureCode"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 2
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "ProductLine",
          "max_value": 4,
          "min_value": 4,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "ProductLine"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 4
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Class",
          "max_value": 3,
          "min_value": 3,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Class"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 3
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "expectation_type": "expect_column_unique_value_count_to_be_between",
        "kwargs": {
          "batch_id": "198755f4192e46c59cff041f7722cd8b",
          "column": "Style",
          "max_value": 3,
          "min_value": 3,
          "strict_max": false,
          "strict_min": false
        },
        "meta": {
          "profiler_details": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "Style"
              },
              "metric_name": "column.distinct_values.count",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      },
      "meta": {},
      "result": {
        "observed_value": 3
      },
      "success": true
    }
  ],
  "statistics": {
    "evaluated_expectations": 130,
    "success_percent": 40.76923076923077,
    "successful_expectations": 53,
    "unsuccessful_expectations": 77
  },
  "success": false
}